#!/bin/sh

# ~/etc/directory {{{

# Helper function to manage symlinks {{{
link_from_to() { # $1:fromFile $2:toFile
	[   -f "$1" ] ||
	[   -d "$1" ] ||
		return 1 # fromFile doesn't exist

	[ ! -L "$2" ] || # toFile is already a link
		return 1

	[   -f "$2" ] && # if toFile exists
		mv "$2" "${2}.old" # make a back up of toFile

	ln -sf "$1" "$2" # link files
}
# Helper function to manage symlinks }}}

# Ensure directories exist {{{
for DIR in             \
	"src"          \
	"var"          \
	"var/books"    \
	"uni"          \
	"tmp"          \
	".cache"       \
	"$DOTNET_ROOT"
do
	[ -d "${HOME}/${DIR}" ] || mkdir -p "${HOME}/${DIR}"
done
# Ensure directories exist }}}

# Install Books {{{
# Loop var BOOK is a string in the form:
# 	<URL> | <FILENAME>
# where URL is a link at which the book can be downloaded from and FILENAME is
# the file name the book should the saved as in the ~/var/books directory. Note
# that FILENAME may contain a "/" to denote subdirectories but not "|" as this
# is the delimiter character.
for BOOK in \
	'https://www.gutenberg.org/files/2488/2488-8.txt|20000_Leagues_Under_the_Seas.txt'   \
	'https://www.gutenberg.org/cache/epub/103/pg103.txt|Around_the_World_in_80_days.txt' \
	'https://www.gutenberg.org/files/132/132-0.txt|The_Art_of_War.txt'                   \
	'https://www.gutenberg.org/cache/epub/1004/pg1004.txt|The_Divine_Comedy.txt'
do
	URL="$(echo "$BOOK" | awk -F '|' '{ print $1 }')"
	FILENAME="${HOME}/var/books/$(echo "$BOOK" | awk -F '|' '{ print $2 }')"

	# proceed if book not yet downloaded
	if [ -f "${FILENAME}" ]
	then
		continue
	fi

	# download using curl or wget
	if [ -x "$(command -v curl)" ]
	then
		curl -s -S -o "${FILENAME}" "${URL}"
	elif [ -x "$(command -v wget)" ]
	then
		wget -q -O "${FILENAME}" "${URL}"
	fi
done
# Install Books }}}

# Keep the HOME directory clean {{{
#
# This section moves everything in the home directory to ~/var, except for
# dotfiles and the directories I allow, listed below.
#
[ -x "$(command -v basename)" ] && for DIR in ~/*
do
	[ -d "$DIR" ] || continue # ignore non dirs, i.e. files

	DIR="$(basename "$DIR")" # strip path

	case "$DIR" in
		"."*)
			# ignore dot.dirs, do nothing
			true
			;;
		""|"bin"|"etc"|"iso"|"lib"|"new"|"old"|"src"|"tmp"|"uni"|"var")
			# I don't mind this dir being in HOME
			true
			;;
		*)
			# this dir doesn't belong here
			if [ -d "${HOME}/var/${DIR}" ]
			then
				mv -f "${HOME}/${DIR}"/*  "${HOME}/var/${DIR}"/.
				mv -f "${HOME}/${DIR}"/.* "${HOME}/var/${DIR}"/.
				rm -rf "${HOME:?}/${DIR}"
			else
				mv -f "${HOME}/${DIR}"  "${HOME}/var"/.
			fi >/dev/null 2>&1
			;;
	esac
done
# Keep the HOME directory clean }}}

# Install git repositories if absent {{{
if [ -x "$(command -v git)" ]
then
	[ ! -d "${HOME}/bin" ] &&
		cd "${HOME}"   &&
		git clone https://gitlab.com/morgaux/bin

	[ ! -d "${HOME}/src/sude" ] &&
		cd "${HOME}/src"    &&
		git clone https://gitlab.com/morgaux/sude

	[ ! -d "${HOME}/src/kata" ] &&
		cd "${HOME}/src"    &&
		git clone https://gitlab.com/morgaux/kata

	[ ! -d "${HOME}/src/dvtm" ] &&
		cd "${HOME}/src"    &&
		git clone https://github.com/martanne/dvtm

	cd "${HOME}" || echo "couldn't cd home" 1>&2
fi
# Install git repositories if absent }}}

# Symlink dotfiles to the HOME directory {{{
link_from_to ~/etc/fvwmrc     ~/.fvwmrc
link_from_to ~/etc/kshrc      ~/.kshrc
link_from_to ~/etc/kshrc      ~/.mkshrc
link_from_to ~/etc/vim/vimrc  ~/.vimrc
link_from_to ~/etc/vim        ~/.vim
link_from_to ~/etc/Xresources ~/.Xresources
link_from_to ~/etc/xinitrc    ~/.xinitrc
link_from_to ~/etc/xinitrc    ~/.xsession
link_from_to ~/etc/wal        ~/.cache/wal
# Symlink dotfiles to the HOME directory }}}

# Make sure these dotfiles are executable {{{
for i in ~/.kshrc ~/.mkshrc ~/.xinitrc ~/.xsession
do
	[ -x "$i" ] || chmod 755 "$i"
done
# Make sure these dotfiles are executable }}}

# Add custom XDG desktop launchers {{{
if [ -d ~/bin/launchers ] && [ -d ~/.local/share/applications ]
then
	for APP in ~/bin/launchers/*.desktop
	do
		LAUNCHER="$HOME/.local/share/applications/$(basename "$APP")"
		[ ! -L "$LAUNCHER" ] && ln -sf "$APP" "$LAUNCHER"
	done
fi
# Add custom XDG desktop launchers }}}

# Setup custom XDG directories {{{
if [ -x "$(command -v xdg-user-dirs-update)" ]
then
	# Destination directories
	XDG_DESKTOP_DIR="$HOME/var/Desktop"
	XDG_DOCUMENTS_DIR="$HOME/var/Documents"
	XDG_DOWNLOAD_DIR="$HOME/var/Downloads"
	XDG_MUSIC_DIR="$HOME/var/Music"
	XDG_PICTURES_DIR="$HOME/var/Pictures"
	XDG_PUBLICSHARE_DIR="$HOME/var/Public"
	XDG_TEMPLATES_DIR="$HOME/var/Templates"
	XDG_VIDEOS_DIR="$HOME/var/Videos"

	for XDG_DIR in                 \
		"$XDG_DESKTOP_DIR"     \
		"$XDG_DOCUMENTS_DIR"   \
		"$XDG_DOWNLOAD_DIR"    \
		"$XDG_MUSIC_DIR"       \
		"$XDG_PICTURES_DIR"    \
		"$XDG_PUBLICSHARE_DIR" \
		"$XDG_TEMPLATES_DIR"   \
		"$XDG_VIDEOS_DIR"
	do
		mkdir -p "$XDG_DIR"
	done

	xdg-user-dirs-update --set DESKTOP     "$XDG_DESKTOP_DIR"
	xdg-user-dirs-update --set DOCUMENTS   "$XDG_DOCUMENTS_DIR"
	xdg-user-dirs-update --set DOWNLOAD    "$XDG_DOWNLOAD_DIR"
	xdg-user-dirs-update --set MUSIC       "$XDG_MUSIC_DIR"
	xdg-user-dirs-update --set PICTURES    "$XDG_PICTURES_DIR"
	xdg-user-dirs-update --set PUBLICSHARE "$XDG_PUBLICSHARE_DIR"
	xdg-user-dirs-update --set TEMPLATES   "$XDG_TEMPLATES_DIR"
	xdg-user-dirs-update --set VIDEOS      "$XDG_VIDEOS_DIR"

	xdg-user-dirs-update

	for DIR in          \
		"Desktop"   \
		"Documents" \
		"Downloads" \
		"Music"     \
		"Pictures"  \
		"Public"    \
		"Templates" \
		"Videos"
	do
		if [ -d "${HOME}/${DIR}" ] &&
			[ -d "${HOME}/var/${DIR}" ]
		then
			mv "${HOME}/${DIR}"/*      \
			   "${HOME}/${DIR}"/.[!.]* \
			   "${HOME}/${DIR}"/..?*   \
			   "${HOME}/var/${DIR}"/.
			rm -rf "${HOME:?}/${DIR}"
		fi
	done
fi
# Setup custom XDG directories }}}

# ~/etc/directory }}}

