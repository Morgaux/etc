#!/bin/sh

##
# Dynamic Status - set status for dwm and dvtm
##



################################################################################
#                              Configuration vars                              #
################################################################################

PREFIX="$HOME" # set to / if running with permissions
SELF="$(basename "$0")"
PIDFILE="$PREFIX/tmp/${SELF}.pid"
LOGFILE="$PREFIX/tmp/${SELF}.log"
PWD_DIR="$PWD"
RUN_DIR="/"
DVTM_FIFO="/tmp/dvtm-status.fifo"
STATUS_LINE=""
FULL_STATUS="TRUE"



################################################################################
#                            Function definitions                              #
################################################################################

# log function
log() {
	_LOG_TIME_STAMP="$(date +%c)"
	touch "$LOGFILE"
	echo "$_LOG_TIME_STAMP	$*" >> "$LOGFILE"
}

# error function
err() {
	log "ERROR:	$*"
	return 1
}

# fatal error function
die() {
	err "$*"
	exit 1
}

simple_status() {
	echo "$(date +'%a %b %d %R:%S %Z')"
}

full_status() {
	#battery
	battper="$(acpi | awk '{print $4}' | tr -d ',')"
	battery="$(acpi | awk '{print $3}' | tr -d ',')"

	#time
	CLK="$(date +'%a %b %d %R:%S %Z')"

	#volume
	if [ "$(amixer get Master | tail -1 | awk '{print $6}' | tr -d '[]')" = "on" ]
	then 
		# volume % with leading space for padding if <10%
		VOL="$(printf "%3s" "$(amixer get Master | tail -1 | awk '{ print $5 }' | tr -d '[]')")"
	else
		VOL="(X)" # mute symbol
	fi

	echo " [ $battper - $battery ] [ Vol: $VOL ] [ $CLK ] "
}

# main function
main() {
	# check dependacies
	for CMD in acpi amixer printf
	do
		[ -x "$(command -v $CMD)" ] && continue
		err "Command \"$CMD\" could not be found, using simple status"
		FULL_STATUS="FALSE"
	done

	# while loop to update status
	while true
	do

		# use back up if dependancies not met
		if [ "$FULL_STATUS" = "TRUE" ]
		then
			STATUS_LINE="$(full_status)"
		else
			STATUS_LINE="$(simple_status)"
		fi

		#put it in the xsetrootname
		if [ -x "$(command -v xsetroot)" ] && [ -x "$(command -v dwm)" ]
		then
			xsetroot -name "$STATUS_LINE"
		fi

		#put in in the dvtm FIFO
		if [ -x "$(command -v dvtm)" ]
		then
			echo "$STATUS_LINE" | "$DVTM_FIFO"
		fi

		sleep 1

	done
}



################################################################################
#                                Init daemon                                   #
################################################################################

# Init logfile
{
	echo "Logfile for $SELF - $0"
	echo "PIDFILE:	$PIDFILE"
	echo "LOGFILE:	$LOGFILE"
	echo "PWD_DIR:	$PWD_DIR"
	echo "RUN_DIR:	$RUN_DIR"
} > "$LOGFILE"

# Init FIFO
[ -p "$DVTM_FIFO" ] || mkfifo -m 600 "$DVTM_FIFO" || die "Cannot use FIFO"



################################################################################
#                                  Run daemon                                  #
################################################################################

# Change to safe running dir
cd "$RUN_DIR" || die "Could not enter RUN_DIR"

# Process PID file
if [ -f "$PIDFILE" ]
then
	if ps -p "$(cat "$PIDFILE")" >/dev/null 2>&1
	then
		die "PID is still running."
	else
		log "PID file found but process not found."
		rm "$PIDFILE"
	fi
fi

# Create PID file
echo "$$" > "$PIDFILE" || die "Could not create PID file"

# call main
main "$@" ; log "main($*) {...} completed with exit code $?"

# Remove PID file
rm "$PIDFILE" || die "Could not remove PID file."

# Remove FIFO file
rm "$DVTM_FIFO" || die "Could not remove the FIFO file."

# exit success
exit 0

