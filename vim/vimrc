"
" https://gitlab.com/morgaux/etc
" Author:   Morgaux Meyer
" License:  MIT (C) Morgaux Meyer
"

" Package Management {{{

" start pathogen {{{
silent! execute pathogen#infect()
filetype plugin indent on
" }}}

" Package Management }}}

" Generic Options {{{

" misc options
scriptencoding utf-8
set ambiwidth=double

set belloff=all
set showcmd
set nohlsearch
set nu
set ruler
set report=1
set nocompatible
set showtabline=2
set laststatus=2
set ignorecase
set smartindent
set backspace=indent,eol,start
set incsearch
set wildmenu
set mouse=a
set mousemodel=popup
set mouseshape=a:beam
set textwidth=80
set colorcolumn=+1
set foldmethod=marker
set whichwrap=b,s,<,>,[,]
set conceallevel=2
set updatetime=100

" use custom settings for files with special settings
set modeline modelines=5

" wrap lines that are longer than the terminal window
set wrap linebreak nolist

" Tabs must be eight wide!!!
set tabstop=8 softtabstop=0 shiftwidth=8 noexpandtab

" No line numbers if the term is too narrow for 80 chars
if &columns < 85
	set nonu
endif

" Generic Options }}}

" Package Specific Options{{{

" options for https://github.com/lifepillar/vim-mucomplete {{{
set completeopt+=menuone
set completeopt+=noselect
set completeopt+=noinsert
" }}}

" options for https://github.com/airblade/vim-gitgutter {{{
highlight link GitGutterAdd    Todo
highlight link GitGutterChange Normal
highlight link GitGutterDelete Error
" }}}

" options for https://github.com/neovimhaskell/haskell-vim {{{
let g:haskell_enable_quantification   = 1 " enable highlighting 'forall'
let g:haskell_enable_recursivedo      = 1 " enable highlighting 'mod' & reg'
let g:haskell_enable_arrowsyntax      = 1 " enable highlighting 'proc'
let g:haskell_enable_pattern_synonyms = 1 " enable highlighting 'pattern'
let g:haskell_enable_typeroles        = 1 " enable highlighting type roles
let g:haskell_enable_static_pointers  = 1 " enable highlighting 'static'
let g:haskell_backpack                = 1 " enable highlighting backpacks
let g:haskell_indent_if               = 3 " indent 'if then else' to condition
let g:haskell_indent_case             = 5 " indent 'case' to expression
let g:haskell_indent_let              = 4 " indent 'let' to expression
let g:haskell_indent_where            = 6 " indent 'where' to expression
let g:haskell_indent_before_where     = 0 " indent leading expression to 'where'
let g:haskell_indent_after_bare_where = 6 " indent naked 'where'
let g:haskell_indent_do               = 3 " indent 'do' to expression
let g:haskell_indent_in               = 0 " match 'in' indent to 'let'
let g:haskell_indent_guard            = 2 " indent '|' guard
" }}}

" options for https://github.com/cormacrelf/vim-colors-github {{{
let g:github_colors_block_diffmark = 0
" }}}

" options for https://github.com/plasticboy/vim-markdown {{{
let g:vim_markdown_folding_disabled          = 1
let g:vim_markdown_follow_anchor             = 1
let g:vim_markdown_strikethrough             = 1
let g:vim_markdown_new_list_item_indent      = 2
let g:vim_markdown_no_extensions_in_markdown = 1
let g:vim_markdown_autowrite                 = 1
let g:vim_markdown_fenced_languages          = [
                                             \    'c=c',
                                             \    'csharp=cs',
                                             \    'vim=vim',
                                             \    'sh=sh',
                                             \    'make=make',
                                             \    'latex=tex',
                                             \    'haskell=haskell',
                                             \    'javascript=javascript',
                                             \    'js=javascript',
                                             \    'python=python',
                                             \    'py=python'
                                             \ ]
" }}}

" options for https://github.com/pangloss/vim-javascript {{{
let g:javascript_plugin_jsdoc = 1
" }}}

" options for https://github.com/RRethy/vim-illuminate {{{
let g:Illuminate_delay                = 0 " show highlight instantly
let g:Illuminate_highlightUnderCursor = 0 " only highlight matches
" }}}

" options for https://github.com/rhysd/git-messenger.vim {{{
let g:git_messenger_into_popup_after_show = v:false
" }}}

" Package Specific Options }}}

" Typing Settings {{{

" Enable spell checking
set spell spelllang=en_nz

" Abbreviations and custom auto corrections
abbreviate teh       the
abbreviate th        the
abbreviate te        the
abbreviate intrest   interest
abbreviate bussiness business
abbreviate ech       each
abbreviate eah       each
abbreviate follwo    follow
abbreviate ommited   omitted
abbreviate ommitted  omitted
abbreviate ommite    omit
abbreviate ommit     omit

" Typing Settings }}}

" Language Specific Options {{{
" Override language specific settings

augroup python_filetype " {{{
	autocmd!
	autocmd Filetype python setlocal softtabstop=4
	autocmd Filetype python setlocal shiftwidth=4
	autocmd Filetype python setlocal expandtab
	autocmd Filetype python setlocal nowrap
augroup END " }}}

augroup java_scala_filetype " {{{
	autocmd!

	autocmd Filetype scala\|java setlocal softtabstop=4
	autocmd Filetype scala\|java setlocal shiftwidth=4
	autocmd Filetype scala\|java setlocal expandtab
	autocmd Filetype scala\|java setlocal nowrap
augroup END " }}}

augroup javascript_filetype " {{{
	autocmd!

	autocmd Filetype javascript setlocal softtabstop=4
	autocmd Filetype javascript setlocal shiftwidth=4
	autocmd Filetype javascript setlocal expandtab
	autocmd Filetype javascript setlocal nowrap
	autocmd Filetype javascript setlocal foldmethod=syntax
augroup END " }}}

augroup csharp_razor_filetype " {{{
	autocmd!

	autocmd Filetype cs\|cshtml\|cshtml.html setlocal softtabstop=4
	autocmd Filetype cs\|cshtml\|cshtml.html setlocal shiftwidth=4
	autocmd Filetype cs\|cshtml\|cshtml.html setlocal expandtab
	autocmd Filetype cs\|cshtml\|cshtml.html setlocal nowrap

	autocmd Filetype cs\|cshtml\|cshtml.html colorscheme vstudioDark
augroup END " }}}

augroup haskell_filetype " {{{
	autocmd!

	autocmd Filetype haskell setlocal softtabstop=4
	autocmd Filetype haskell setlocal shiftwidth=4
	autocmd Filetype haskell setlocal expandtab
	autocmd Filetype haskell setlocal nowrap
augroup END " }}}

augroup shell_filetype " {{{
	autocmd!

	autocmd Filetype sh setlocal tabstop=8
	autocmd Filetype sh setlocal softtabstop=0
	autocmd Filetype sh setlocal shiftwidth=8
	autocmd Filetype sh setlocal noexpandtab
	autocmd Filetype sh setlocal nowrap
augroup END " }}}

augroup vimscript_filetype " {{{
	autocmd!

	autocmd Filetype vim setlocal tabstop=8
	autocmd Filetype vim setlocal softtabstop=0
	autocmd Filetype vim setlocal shiftwidth=8
	autocmd Filetype vim setlocal noexpandtab
	autocmd Filetype vim setlocal nowrap

	autocmd Filetype vim abbreviate hi   highlight
	autocmd Filetype vim abbreviate au   autocmd
	autocmd Filetype vim abbreviate colo colorscheme
augroup END " }}}

augroup c_cpp_filetype " {{{
	autocmd!

	autocmd Filetype c\|cpp setlocal tabstop=8
	autocmd Filetype c\|cpp setlocal softtabstop=0
	autocmd Filetype c\|cpp setlocal shiftwidth=8
	autocmd Filetype c\|cpp setlocal noexpandtab
	autocmd Filetype c\|cpp setlocal nowrap
augroup END " }}}

augroup makefile_filetype " {{{
	autocmd!

	autocmd Filetype make setlocal tabstop=8
	autocmd Filetype make setlocal softtabstop=0
	autocmd Filetype make setlocal shiftwidth=8
	autocmd Filetype make setlocal noexpandtab nowrap
augroup END " }}}

augroup latex_filetype " {{{
	autocmd!

	autocmd Filetype tex setlocal tabstop=8
	autocmd Filetype tex setlocal softtabstop=0
	autocmd Filetype tex setlocal shiftwidth=8
	autocmd Filetype tex setlocal noexpandtab
	autocmd Filetype tex setlocal nowrap
augroup END " }}}

augroup fortune_filetype " {{{
	autocmd!

	" This augroup allows for the detection of fortune(1) cookie files via
	" a number of methods, namely by checking if the current file is located
	" in a known directory that is used by a common fortune(1)
	" implementation, by checking if the first few lines contain an empty
	" line with just a '%' (a percent sign is used as a fortune delimiter to
	" allow for multi-line fortunes), and lastly if the file has the
	" extension '.fortune' or '.cookie'. If any of these conditions is met,
	" and no other significant FileType has already been detected, then the
	" FileType is set to 'fortune' to be used by the vim-fortune plugin.
	"
	" Common paths include:
	" - /usr/share/games/fortune (OpenBSD)
	" - /sys/games/lib/fortune   (Plan9)
	" - /usr/share/fortune       (Linux)

	if (expand('%:p:h') =~ '^'                      .
	\                      '/\(\(usr\)\|\(sys\)\)/' .
	\                      '\(share/\)\?'           .
	\                      '\(games\?/\)\?'         .
	\                      '\(lib/\)\?'             .
	\                      'fortunes\?'             .
	\                      '$') &&
	\  (expand('%:e') !~ 'dat')
		" current file is in a fortunes directory (but not a '.dat')
		setfiletype fortune
	elseif (index(getline(1, 10), '%') > -1)
		" first ten lines have a '%' on an otherwise empty line
		setfiletype fortune
	elseif (expand('%:e' =~ '\(fortune\)\|\(cookie\)'))
		" file has a fortune format file extension
		setfiletype fortune
	endif
augroup END " }}}

" Language Specific Options }}}

" Visual and Syntax Options {{{

" enable syntax
syntax on

" Colours and highlighting
set t_Co=256                  " use 256 colors
set t_ut=""                   " disable background erase
set t_8f=[38;2;%lu;%lu;%lum " set foreground color
set t_8b=[48;2;%lu;%lu;%lum " set background color
set t_Co=256                  " Enable 256 colors
set termguicolors             " Enable GUI colors for the terminal for truecolor
set background=dark           " ahhhhhh my eyes!!
let g:loaded_matchparen = 1     " prevent annoying paren matching

" Catch whitespace errors
match Error /\s\+$\| \+\ze\t/
augroup whitespace_errors " {{{
	autocmd!

	autocmd InsertEnter * redraw!
	autocmd InsertLeave * redraw!
augroup END " }}}

" Show tabs as comments
set list
set listchars=tab:\|\ 
match Comment /\t/

" Set colorscheme (after other highlight settings)
colorscheme PaperColor

" Visual and Syntax Options }}}

" Settings Stolen from JCS {{{

"
" I've shamelessly stolen this stuff, although it's quite good so I don't mind
"
" http://github.com/jcs/dotfiles
" Author: Joshua Stein
" License: none
"
" Don't pollute directories with swap files, keep them in one place
silent !mkdir -p ~/.vim/backup/
silent !mkdir -p ~/.vim/swp/
set backupdir=~/.vim/backup//
set directory=~/.vim/swp//
" ...except crontab, which will complain that it can't see any changes
augroup jcs_autocmds " {{{
	autocmd!

	autocmd FileType crontab setlocal bkc=yes
augroup END " }}}

" Settings Stolen from JCS }}}

